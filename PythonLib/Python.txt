@dest: C:\Users\Leonardo\AppData\Roaming\Sublime Text 3\Packages\LeoCodeIntel\Python snippets
@scope: source.python




// https://docs.python.org/3/library/functions.html#reversed
__import__(name) // globals=None, locals=None, fromlist=(), level=0
abs(x)
all(iterable)
any(iterable)
ascii(object)
bin(x)
callable(object)
chr(i)
compile(source, filename, mode) // flags=0, dont_inherit=False, optimize=-1
delattr(object, name)
dir(x)
divmod(a, b)
enumerate(iterable) // start=0
eval(expression) // globals=None, locals=None
exec(object)
exit                   sys.exit(0)              exit
filter(function, iterable)
float(x)
format(value)
getattr(object, name)
globals()
hasattr(object, name)
hash(object)
help(x)
hex(x)
id(object)
input()
int(x)
isinstance(object, classinfo)
issubclass(class, classinfo)
iter(object)
len(s)
list(x)
map(function, iterable, ...)
max(arg1, arg2, *args)
max(iterable)
memoryview(obj)
min(arg1, arg2, *args)
min(iterable)
next(iterator)
oct(x)
open(file) // mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None
ord(c)
pow(x, y)
range(start, stop)
range(stop)
repr(object)
reversed(seq)
round(number)
set(x)
setattr(object, name, value)
sorted(iterable)
staticmethod(function)
str(x)
sum(iterable)
super()
tuple(x)
zip(*iterables)
write(str)
read()
readlines()
Path(path)
//GEN.py
os.ctermid()
os.chdir(path)
os.fchdir(fd)
os.getcwd()
os.fsencode(filename)
os.fsdecode(filename)
os.getenv(key, default=None)
os.getenvb(key, default=None)
os.get_exec_path(env=None)
os.getegid()
os.geteuid()
os.getgid()
os.getgrouplist(user, group)
os.getgroups()
os.getlogin()
os.getpgid(pid)
os.getpgrp()
os.getpid()
os.getppid()
os.getpriority(which, who)
os.getresuid()
os.getresgid()
os.getuid()
os.initgroups(username, gid)
os.putenv(key, value)
os.setegid(egid)
os.seteuid(euid)
os.setgid(gid)
os.setgroups(groups)
os.setpgrp()
os.setpgid(pid, pgrp)
os.setpriority(which, who, priority)
os.setregid(rgid, egid)
os.setresgid(rgid, egid, sgid)
os.setresuid(ruid, euid, suid)
os.setreuid(ruid, euid)
os.getsid(pid)
os.setsid()
os.setuid(uid)
os.strerror(code)
os.umask(mask)
os.uname()
os.unsetenv(key)
os.fdopen(fd, *args, **kwargs)
os.close(fd)
os.closerange(fd_low, fd_high)
os.device_encoding(fd)
os.dup(fd)
os.dup2(fd, fd2, inheritable=True)
os.fchmod(fd, mode)
os.fchown(fd, uid, gid)
os.fdatasync(fd)
os.fpathconf(fd, name)
os.fstat(fd)
os.fstatvfs(fd)
os.fsync(fd)
os.ftruncate(fd, length)
os.get_blocking(fd)
os.isatty(fd)
os.lockf(fd, cmd, len)
os.lseek(fd, pos, how)
os.open(path, flags, mode=0o777, *, dir_fd=None)
os.openpty()
os.pipe()
os.pipe2(flags)
os.posix_fallocate(fd, offset, len)
os.posix_fadvise(fd, offset, len, advice)
os.pread(fd, buffersize, offset)
os.pwrite(fd, str, offset)
os.read(fd, n)
os.sendfile(out, in, offset, count)
os.set_blocking(fd, blocking)
os.readv(fd, buffers)
os.tcgetpgrp(fd)
os.tcsetpgrp(fd, pg)
os.ttyname(fd)
os.write(fd, str)
os.writev(fd, buffers)
os.get_terminal_size(fd=STDOUT_FILENO)
os.get_inheritable(fd)
os.set_inheritable(fd, inheritable)
os.get_handle_inheritable(handle)
os.set_handle_inheritable(handle, inheritable)
os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)
os.chdir(path)
os.chflags(path, flags, *, follow_symlinks=True)
os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)
os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)
os.chroot(path)
os.fchdir(fd)
os.getcwd()
os.getcwdb()
os.lchflags(path, flags)
os.lchmod(path, mode)
os.lchown(path, uid, gid)
os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)
os.listdir(path='.')
os.lstat(path, *, dir_fd=None)
os.mkdir(path, mode=0o777, *, dir_fd=None)
os.makedirs(name, mode=0o777, exist_ok=False)
os.mkfifo(path, mode=0o666, *, dir_fd=None)
os.mknod(path, mode=0o600, device=0, *, dir_fd=None)
os.major(device)
os.minor(device)
os.makedev(major, minor)
os.pathconf(path, name)
os.readlink(path, *, dir_fd=None)
os.remove(path, *, dir_fd=None)
os.removedirs(name)
os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)
os.renames(old, new)
os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)
os.rmdir(path, *, dir_fd=None)
os.scandir(path='.')
os.stat(path, *, dir_fd=None, follow_symlinks=True)
os.stat_float_times([ newvalue ])
os.statvfs(path)
os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)
os.sync()
os.truncate(path, length)
os.unlink(path, *, dir_fd=None)
os.utime(path, times=None, *, [ ns, ] dir_fd=None, follow_symlinks=True)
os.walk(top, topdown=True, onerror=None, followlinks=False)
os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)
os.getxattr(path, attribute, *, follow_symlinks=True)
os.listxattr(path=None, *, follow_symlinks=True)
os.removexattr(path, attribute, *, follow_symlinks=True)
os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)
os.abort()
os.execl(path, arg0, arg1, ...)
os._exit(n)
os.fork()
os.forkpty()
os.kill(pid, sig)
os.killpg(pgid, sig)
os.nice(increment)
os.plock(op)
os.popen(cmd, mode='r', buffering=-1)
os.spawnl(mode, path, ...)
os.startfile(path [, operation ])
os.system(command)
os.times()
os.wait()
os.waitid(idtype, id, options)
os.waitpid(pid, options)
os.wait3(options)
os.wait4(pid, options)
os.WCOREDUMP(status)
os.WIFCONTINUED(status)
os.WIFSTOPPED(status)
os.WIFSIGNALED(status)
os.WIFEXITED(status)
os.WEXITSTATUS(status)
os.WSTOPSIG(status)
os.WTERMSIG(status)
os.sched_get_priority_min(policy)
os.sched_get_priority_max(policy)
os.sched_setscheduler(pid, policy, param)
os.sched_getscheduler(pid)
os.sched_setparam(pid, param)
os.sched_getparam(pid)
os.sched_rr_get_interval(pid)
os.sched_yield()
os.sched_setaffinity(pid, mask)
os.sched_getaffinity(pid)
os.confstr(name)
os.cpu_count()
os.getloadavg()
os.sysconf(name)
os.urandom(n)
os.path.abspath(path)
os.path.basename(path)
os.path.commonpath(paths)
os.path.commonprefix(list)
os.path.dirname(path)
os.path.exists(path)
os.path.lexists(path)
os.path.expanduser(path)
os.path.expandvars(path)
os.path.getatime(path)
os.path.getmtime(path)
os.path.getctime(path)
os.path.getsize(path)
os.path.isabs(path)
os.path.isfile(path)
os.path.isdir(path)
os.path.islink(path)
os.path.ismount(path)
os.path.join(path, *paths)
os.path.normcase(path)
os.path.normpath(path)
os.path.realpath(path)
os.path.relpath(path, start=os.curdir)
os.path.samefile(path1, path2)
os.path.sameopenfile(fp1, fp2)
os.path.samestat(stat1, stat2)
os.path.split(path)
os.path.splitdrive(path)
os.path.splitext(path)
os.path.splitunc(path)
re.compile(pattern, flags=0)
re.search(pattern, string, flags=0)
re.match(pattern, string, flags=0)
re.fullmatch(pattern, string, flags=0)
re.split(pattern, string, maxsplit=0, flags=0)
re.findall(pattern, string, flags=0)
re.finditer(pattern, string, flags=0)
re.sub(pattern, repl, string, count=0, flags=0)
re.subn(pattern, repl, string, count=0, flags=0)
re.escape(string)
re.purge()
math.ceil(x)
math.copysign(x, y)
math.fabs(x)
math.factorial(x)
math.floor(x)
math.fmod(x, y)
math.frexp(x)
math.fsum(iterable)
math.gcd(a, b)
math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
math.isfinite(x)
math.isinf(x)
math.isnan(x)
math.ldexp(x, i)
math.modf(x)
math.trunc(x)
math.exp(x)
math.expm1(x)
math.log(x [, base ])
math.log1p(x)
math.log2(x)
math.log10(x)
math.pow(x, y)
math.sqrt(x)
math.acos(x)
math.asin(x)
math.atan(x)
math.atan2(y, x)
math.cos(x)
math.hypot(x, y)
math.sin(x)
math.tan(x)
math.degrees(x)
math.radians(x)
math.acosh(x)
math.asinh(x)
math.atanh(x)
math.cosh(x)
math.sinh(x)
math.tanh(x)
math.erf(x)
math.erfc(x)
math.gamma(x)
math.lgamma(x)
