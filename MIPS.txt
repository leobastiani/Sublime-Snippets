@dest: C:\Users\Leonardo\AppData\Roaming\Sublime Text 3\Packages\mips-syntax\mips snippets
@scope: source.mips


add_                                                        add \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} + \$${3}                                                  $d = $s + $t
subtract_                                                   sub \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} - \$${3}                                                  $d = $s - $t
and_                                                        and \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} & \$${3}                                                  $d = $s & $t
or_                                                         or \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} | \$${3}                                                   $d = $s | $t
nor_                                                        nor \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = ~ (\$${2} | \$${3})                                              $d = ~ ($s | $t)
move_                                                       move \$${1:dest}, \$${2:src} # \$${1} = \$${2}                                                                        add $rt,$rs,$zero
clear_                                                      clear \$${1:dest} # \$${1} = 0                                                                                        add $rt,$zero,$zero
not_                                                        not \$${1:dest}, \$${2:src} # \$${1} = !\$${2}                                                                        nor $rt,$rs,$zero
multiply_                                                   mul \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} * \$${3}                                                  $d = $s * $t
add_unsigned|addu_                                          addu \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} + \$${3}                                                 $d = $s + $t
subtract_unsigned|subu_                                     subu \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} - \$${3}                                                 $d = $s - $t
add_immediate|addi_                                         addi \$${1:t}, \$${2:src1}, ${3:C} # \$${1} = \$${2} + ${3}                                                           $t = $s + C (signed)
add_immediate_unsigned|addiu_                               addiu \$${1:t}, \$${2:src1}, ${3:C} # \$${1} = \$${2} + ${3}                                                          $t = $s + C (unsigned)
load_word|lw_                                               lw \$${1:t}, ${2:N}(\$${3:s}) # \$${1} = Memory[${2} + \$${3}]                                                        $t = Memory[$s + C]
load_word_label                                             lw \$${1:t}, ${2:Label} # \$${1} = Memory[${2}]                                                                       $t = Memory[Label]
store_word_label                                            sw \$${1:t}, ${2:Label} # Memory[${2}] = \$${1}                                                                       Memory[Label] = $t
load_byte_label                                             lb \$${1:t}, ${2:Label} # \$${1} = Memory[${2}]                                                                       $t = Memory[Label]
store_byte_label                                            sb \$${1:t}, ${2:Label} # Memory[${2}] = \$${1}                                                                       Memory[Label] = $t
load_halfword|lh_                                           lh \$${1:t}, ${2:N}(\$${3:s}) # \$${1} = Memory[${2} + \$${3}]                                                        $t = Memory[$s + C] (signed)
load_halfword_unsigned|lhu_                                 lhu \$${1:t}, ${2:N}(\$${3:s}) # \$${1} = Memory[${2} + \$${3}]                                                       $t = Memory[$s + C] (unsigned)
load_byte|lb_                                               lb \$${1:t}, ${2:N}(\$${3:s}) # \$${1} = Memory[${2} + \$${3}]                                                        $t = Memory[$s + C] (signed)
load_byte_unsigned|lbu_                                     lbu \$${1:t}, ${2:N}(\$${3:s}) # \$${1} = Memory[${2} + \$${3}]                                                       $t = Memory[$s + C] (unsigned)
store_word|sw_                                              sw \$${1:t}, ${2:N}(\$${3:s}) # Memory[${2} + \$${3}] = \$${1}                                                        Memory[$s + C] = $t
store_half|sh_                                              sh \$${1:t}, ${2:N}(\$${3:s}) # Memory[${2} + \$${3}] = \$${1}                                                        Memory[$s + C] = $t
store_byte|sb_                                              sb \$${1:t}, ${2:N}(\$${3:s}) # Memory[${2} + \$${3}] = \$${1}                                                        Memory[$s + C] = $t
load_upper_immediate|lui_                                   lui \$${1:t}, ${2:C} # \$${1} = ${2} << 16                                                                            $t = C << 16
move_from_high|mfhi_                                        mfhi \$${1:dest} # \$${1} = HI                                                                                        $d = HI
move_from_low|mflo_                                         mflo \$${1:dest} # \$${1} = LO                                                                                        $d = LO
and_immediate|andi_                                         andi \$${1:t}, \$${2:src1}, ${3:C} # \$${1} = \$${2} & ${3}                                                           $t = $s & C
or_immediate|ori_                                           ori \$${1:t}, \$${2:src1}, ${3:C} # \$${1} = \$${2} | ${3}                                                            $t = $s | C
exclusive_or|xor_                                           xor \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} xor \$${3}                                                $d = $s ^ $t
set_on_less_than_unsigned|sltu_                             sltu \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} < \$${3}                                                 $d = ($s < $t)
set_on_less_than_immediate|slti_                            slti \$${1:t}, \$${2:src1}, ${3:C} # \$${1} = \$${2} < ${3}                                                           $t = ($s < C)
shift_left_logical_immediate|sll_                           sll \$${1:dest}, \$${2:t}, ${3:shamt} # \$${1} = \$${2} << ${3}                                                       $d = $t << shamt
shift_right_logical_immediate|srl_                          srl \$${1:dest}, \$${2:t}, ${3:shamt} # \$${1} = \$${2} >> ${3}                                                       $d = $t >> shamt
shift_left_logical|sllv_                                    sllv \$${1:dest}, \$${2:t}, \$${3:s} # \$${1} = \$${2} << \$${3}                                                      $d = $t << $s
shift_right_logical|srlv_                                   srlv \$${1:dest}, \$${2:t}, \$${3:s} # \$${1} = \$${2} >> \$${3}                                                      $d = $t >> $s
float_add_single|add_s_                                     add.s \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} + \$${3}                                                         $x = $y + $z
float_subtract_single|sub_s_                                sub.s \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} - \$${3}                                                         $x = $y - $z
float_multiply_single|mul_s_                                mul.s \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} * \$${3}                                                         $x = $y * $z
float_divide_single|div_s_                                  div.s \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} / \$${3}                                                         $x = $y / $z
float_add_double|add_d_                                     add.d \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} + \$${3}                                                         $x = $y + $z
float_subtract_double|sub_d_                                sub.d \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} - \$${3}                                                         $x = $y - $z
float_multiply_double|mul_d_                                mul.d \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} * \$${3}                                                         $x = $y * $z
float_divide_double|div_d_                                  div.d \$${1:x}, \$${2:y}, \$${3:z} # \$${1} = \$${2} / \$${3}                                                         $x = $y / $z
load_immediate|li_                                          li \$${1:rd}, ${2:IMMED} # \$${1} = ${2}                                                                              lui $rd,IMMED[31:16]; ori $rd,$rd,IMMED[15:0]
seq_                                                        seq \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = (\$${2} == \$${3})                                               $(d = $s == $t
sge_                                                        sge \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = (\$${2} >= \$${3})                                               $d = $s >= $t
sgt_                                                        sgt \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = (\$${2}  > \$${3})                                               $d = $s  > $t
sle_                                                        sle \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = (\$${2} <= \$${3})                                               $d = $s <= $t
sne_                                                        sne \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = (\$${2} =< \$${3})                                               $d = $s =< $t
set_on_less_than|slt_                                       slt \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = (\$${2}  < \$${3})                                               $d = $s  < $t
branch_on_equal|beq_                                        beq \$${1:s}, \$${2:t}, ${3:Label} # (\$${1} == \$${2}) -> ${3}                                                       (if ($s == $t) go) to PC+4+4*
branch_on_not_equal|bne_                                    bne \$${1:s}, \$${2:t}, ${3:Label} # (\$${1} != \$${2}) -> ${3}                                                       if ($s != $t) go to PC+4+4*C
branch_if_greater_than|bgt_                                 bgt \$${1:rs}, \$${2:rt}, ${3:Label} # (\$${1}  > \$${2}) -> ${3}                                                     slt $at,$rt,$rs; bne $at,$zero,Label
branch_if_less_than|blt_                                    blt \$${1:rs}, \$${2:rt}, ${3:Label} # (\$${1}  < \$${2}) -> ${3}                                                     slt $at,$rs,$rt; bne $at,$zero,Label
branch_if_greater_than_or_equal|bge_                        bge \$${1:rs}, \$${2:rt}, ${3:Label} # (\$${1} >= \$${2}) -> ${3}                                                     slt $at,$rs,$rt; beq $at,$zero,Label
branch_if_less_than_or_equal|ble_                           ble \$${1:rs}, \$${2:rt}, ${3:Label} # (\$${1} <= \$${2}) -> ${3}                                                     slt $at,$rt,$rs; beq $at,$zero,Label
branch_if_greater_than_unsigned|bgtu_                       bgtu \$${1:rs}, \$${2:rt}, ${3:Label} # (\$${1} >= \$${2}) -> ${3}                                                    sltu $at,$rt,$rs; bne $at,$zero,Label
branch_if_greater_than_zero|bgtz_                           bgtz \$${1:rs}, ${2:Label} # (\$${1}  > 0) -> ${2}                                                                    slt $at,$zero,$rs; bne $at,$zero,Label
branch_if_less_than_zero|bltz_                              bltz \$${1:rs}, ${2:Label} # (\$${1}  < 0) -> ${2}                                                                    branch_if_less_than_zero
branch_if_equal_to_zero|beqz_                               beqz \$${1:rs}, ${2:Label} # (\$${1} == 0) -> ${2}                                                                    beq $rs,$zero,Label
divide_with_hi_lo                                           div \$${1:s}, \$${2:t} # LO=\$${1} / \$${2}; HI=\$${1} % \$${2}                                                       LO=$s / $t; HI=$s % $t
divide_unsigned_with_hi_lo|divu_                            divu \$${1:s}, \$${2:t} # LO=\$${1} / \$${2}; HI=\$${1} % \$${2}                                                      LO=$s / $t; HI=$s % $t
load_address|la_                                            la \$${1:rd}, ${2:LabelAddr} # *\$${1} = &${2}                                                                        lui $rd,LabelAddr[31:16]; ori $rd,$rd,LabelAddr[15:0]
divides_and_returns_quotient|div_                           div \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} / \$${3}                                                  div $s,$t; mflo $d
divides_and_returns_remainder|rem_                          rem \$${1:dest}, \$${2:src1}, \$${3:src2} # \$${1} = \$${2} % \$${3}                                                  div $s,$t; mfhi $d





# Não possuem comentário ainda
branch_and_link|bal_                                        bal ${1:Label}                                                                                                        bgezal $zero,Label
branch_unconditionally|b_                                   b ${1:Label}                                                                                                          beq $zero,$zero,Label
branch_on_float_true|bcZt_                                  bc${1:1}t ${2:Label}                                                                                                  if( (cond == 1) go )to PC+4+100
branch_on_float_false|bcZf_                                 bc${1:1}f ${2:Label}                                                                                                  if( (cond == 0) go )to PC+4+100
jump_                                                       j ${1:Label}                                                                                                          PC = PC+4[31:28] . C*
multiply_with_hi_lo|mult_                                   mult \$${1:s}, \$${2:t}                                                                                               LO=(($s * $t)<<32)>>32; HI=($s * $t)>>32
multiply_unsigned_with_hi_lo|multu_                         multu \$${1:s}, \$${2:t}                                                                                              LO=(($s * $t)<<32)>>32; HI=($s * $t)>>32;
shift_right_arithmetic_immediate|sra_                       sra \$${1:dest}, \$${2:t}, ${3:shamt}                                                                                 shifts shamt number of bits
shift_right_arithmetic|srav_                                srav \$${1:dest}, \$${2:t}, \$${3:s}                                                                                  shifts $s number of bits
move_from_control_register|mfcZ_                            mfc${1:1} \$${2:t}, \$${3:d}                                                                                          $t = Coprocessor[Z].ControlRegister[$d]
move_to_control_register|mtcZ_                              mtc${1:1} \$${2:t}, \$${3:d}                                                                                          Coprocessor[Z].ControlRegister[$d] = $t
jump_register|jr_                                           jr \$${1:ra}                                                                                                          goto address $s
jump_and_link|jal_                                          jal ${1:Label}                                                                                                        $31 = PC + 4; PC = PC+4[31:28] . C*4
load_word_coprocessor|lwcZ_                                 lwc${1:1} \$${2:x}, ${3:CONST}(\$${4:y})                                                                              Coprocessor[Z].DataRegister[$x] = Memory[$y + CONST
store_word_coprocessor|swcZ_                                swc${1:1} \$${2:x}, ${3:CONST}(\$${4:y})                                                                              Memory[$y + CONST] = Coprocessor[Z].DataRegister[$x]
abs_d_                                                      abs.d \$${1:dest}, \$${2:src}                                                                                         Floating Point Absolute Value Double
abs_s_                                                      abs.s \$${1:dest}, \$${2:src}                                                                                         Floating Point Absolute Value Single
float_compare_single|c_lt_s_                                c.lt.s \$${1:f2}, \$${2:f4}                                                                                           if ($f2 < $f4) cond=1; else cond=0
float_compare_double|c_lt_d_                                c.lt.d \$${1:f2}, \$${2:f4}                                                                                           if ($f2 < $f4) cond=1; else cond=0
c_eq_d_                                                     c.eq.d \$${1:src1}, \$${2:src2}                                                                                       Compare Equal Double
c_eq_s_                                                     c.eq.s \$${1:src1}, \$${2:src2}                                                                                       Compare Equal Single
c_le_d_                                                     c.le.d \$${1:src1}, \$${2:src2}                                                                                       Compare Less Than Equal Double
c_le_s_                                                     c.le.s \$${1:src1}, \$${2:src2}                                                                                       Compare Less Than Equal Single
cvt_d_s_                                                    cvt.d.s \$${1:dest}, \$${2:src}                                                                                       Convert Single to Double
cvt_d_w_                                                    cvt.d.w \$${1:dest}, \$${2:src}                                                                                       Convert Integer to Double
cvt_s_d_                                                    cvt.s.d \$${1:dest}, \$${2:src}                                                                                       Convert Double to Single
cvt_s_w_                                                    cvt.s.w \$${1:dest}, \$${2:src}                                                                                       Convert Integer to Single
cvt_w_d_                                                    cvt.w.d \$${1:dest}, \$${2:src}                                                                                       Convert Double to Integer
cvt_w_s_                                                    cvt.w.s \$${1:dest}, \$${2:src}                                                                                       Convert Single to Integer
l_d_                                                        l.d \$${1:dest}, ${2:address}                                                                                         Load Floating Point Double
l_s_                                                        l.s \$${1:dest}, ${2:address}                                                                                         Load Floating Point Single
mov_d_                                                      mov.d \$${1:dest}, \$${2:src}                                                                                         Move Floating Point Double
mov_s_                                                      mov.s \$${1:dest}, \$${2:src}                                                                                         Move Floating Point Single
neg_d_                                                      neg.d \$${1:dest}, \$${2:src}                                                                                         Negate Double
neg_s_                                                      neg.s \$${1:dest}, \$${2:src}                                                                                         Negate Single
s_d_                                                        s.d \$${1:dest}, ${2:address}                                                                                         Store Floating Point Double
s_s_                                                        s.s \$${1:dest}, ${2:address}                                                                                         Store Floating Point Single